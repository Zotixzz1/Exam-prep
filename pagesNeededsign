BACKEND

const http = require('http');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcrypt');

const SECRET_KEY = 'your_secret_key'; // Replace with a secure key
const PORT = 3000;

const users = []; // In-memory user store (replace with a database in production)

// Helper function to parse JSON from the request body
function parseRequestBody(req) {
  return new Promise((resolve, reject) => {
    let body = '';
    req.on('data', chunk => {
      body += chunk.toString();
    });
    req.on('end', () => {
      try {
        resolve(JSON.parse(body));
      } catch (error) {
        reject(error);
      }
    });
  });
}

// Server logic
const server = http.createServer(async (req, res) => {
  if (req.method === 'POST' && req.url === '/signup') {
    // Sign up logic
    try {
      const { username, password } = await parseRequestBody(req);
      const hashedPassword = await bcrypt.hash(password, 10);
      users.push({ username, password: hashedPassword });
      res.writeHead(201, { 'Content-Type': 'application/json' });
      res.end(JSON.stringify({ message: 'User registered successfully' }));
    } catch (error) {
      res.writeHead(400, { 'Content-Type': 'application/json' });
      res.end(JSON.stringify({ error: 'Invalid request' }));
    }
  } else if (req.method === 'POST' && req.url === '/login') {
    // Login logic
    try {
      const { username, password } = await parseRequestBody(req);
      const user = users.find(u => u.username === username);

      if (!user || !(await bcrypt.compare(password, user.password))) {
        res.writeHead(401, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({ error: 'Invalid credentials' }));
        return;
      }

      const token = jwt.sign({ username }, SECRET_KEY, { expiresIn: '1h' });
      res.writeHead(200, { 'Content-Type': 'application/json' });
      res.end(JSON.stringify({ token }));
    } catch (error) {
      res.writeHead(400, { 'Content-Type': 'application/json' });
      res.end(JSON.stringify({ error: 'Invalid request' }));
    }
  } else if (req.method === 'GET' && req.url === '/protected') {
    // Protected route logic
    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.split(' ')[1];

    if (!token) {
      res.writeHead(401, { 'Content-Type': 'application/json' });
      res.end(JSON.stringify({ error: 'Unauthorized access' }));
      return;
    }

    jwt.verify(token, SECRET_KEY, (err, user) => {
      if (err) {
        res.writeHead(403, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({ error: 'Forbidden access' }));
        return;
      }

      res.writeHead(200, { 'Content-Type': 'application/json' });
      res.end(JSON.stringify({ message: `Welcome ${user.username}, you are authenticated!` }));
    });
  } else {
    // Handle unknown routes
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

// Start the server
server.listen(PORT, () => console.log(`Server running at http://localhost:${PORT}`));


FRONTEND

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login</title>
</head>
<body>
    <h1>Login</h1>
    <form id="loginForm">
        <input type="text" id="username" placeholder="Username" required />
        <input type="password" id="password" placeholder="Password" required />
        <button type="submit">Login</button>
    </form>

    <script>
        document.getElementById('loginForm').addEventListener('submit', async function (e) {
            e.preventDefault();

            const username = document.getElementById('username').value;
            const password = document.getElementById('password').value;

            try {
                const response = await fetch('http://localhost:3000/login', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ username, password }),
                });

                if (!response.ok) throw new Error('Failed to log in');

                const data = await response.json();
                localStorage.setItem('token', data.token); // Store the token
                alert('Login successful!');
                window.location.href = '/dashboard.html'; // Redirect to a protected page
            } catch (error) {
                alert(error.message);
            }
        });
    </script>
</body>
</html>


PROTECTED PAGE

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard</title>
</head>
<body>
    <h1>Dashboard</h1>
    <p id="welcomeMessage"></p>

    <script>
        async function checkAuthentication() {
            const token = localStorage.getItem('token');
            if (!token) {
                alert('You must be logged in to view this page.');
                window.location.href = '/login.html';
                return;
            }

            try {
                const response = await fetch('http://localhost:3000/protected', {
                    headers: { Authorization: `Bearer ${token}` },
                });

                if (!response.ok) throw new Error('Unauthorized');

                const data = await response.json();
                document.getElementById('welcomeMessage').innerText = data.message;
            } catch (error) {
                alert(error.message);
                localStorage.removeItem('token'); // Clear invalid token
                window.location.href = '/login.html';
            }
        }

        checkAuthentication();
    </script>
</body>
</html>

You can dynamically update the navbar based on whether the user is logged in or not by checking for the presence of a valid token in localStorage. The code for this remains the same as shown earlier.
